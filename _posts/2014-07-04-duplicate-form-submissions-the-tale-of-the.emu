|> Metadata
    title = "Duplicate Form Submissions - The Tale Of The Button That Got Clicked Twice!"
    date = '2014-07-04T23:47:28+05:30'
    tags = code

As the old saying goes -

If there’s a button, the user will click it. If the button can be clicked twice, they would click it twice!

Duplicate data due to multiple submissions of the same form can be disturbing (or alarming, depending on what your application does!). There are primarily two approaches to solve the problem - handling it on the server side, avoiding multiple submissions from the client side - and I would say implement both of them!
(I encountered a solution on a forum that says “Best solution: Educate your users to the problems with multiple submits"  .This is not just a herculean task but just plain right against principles of good usability - if you are not convinced, read the quote at the top of this page!)
Let’s see what our options are:
Disable the button with javascript after user clicks it once - Fairly simple to do. Just make sure that once the user has clicked the button once your submit function disables the button first and then sends the request to the server.
```
someButton.disabled ="disabled";
someForm.submit()
```
This would work only when you are using a separate function to submit the form. A common gotcha is to disable the button on click/submit and then expecting the form to submit on its own!

Disable the button with jQuery - jQuery is king (or queen?)! This would probably be the best way to resolve the multiple form submission problem on the client side. jQuery provides a function called .one() that binds a handler to the selector which is executed only once. What .one() essentially does is that it uses .on() to bind your function and then calls `$(this).off(event)` to make sure that the selected element does not respond to the same event again.So you could do something like:
```

$(''#myForm'').one(''submit'',function(){

```

Make sure that you use ‘submit’ and not ''click’ so that the form cannot be submitted even by other means and not just by clicking on the submit button.Note that this would take care of scenarios of handing validation errors on client side as well (for server side validation errors spilling on the the page after form submission you’ll have to tinker with the script depending on whether it is a page reload or an asynchronous call.

If you use Grails there’s the withForm token - Grails provides a simple way to handle multiple form submission issue. Use the `useToken="true"` tag on your form and add the `withForm{}` method in your controller.
```
<g:form useToken="true" ...>

withForm {
 // good request
}.invalidToken {
 // bad request
}
```

This approach relies on both client and server side

Flask’s awesomeness - If you are a python guy and use flask to solve problems of the world, you have already solved this one. I’m assuming that you are using WTForms to render your forms, in that case all that is required is that you use a `{{form.hidden_tag()}}` inside your form element in your template and put the save logic inside a `form.validate_on_submit()`: method. Simple and efficient with a lot of pythony goodness!
Handling it in the server - I would say, do this in addition to any client side approach! There are two ways I can think of doing this (please suggest flaws with these approaches or something better in the comments section).Use a (logged_in_user + record + timestamp + reasonable_time_diff) to decide if the record is an undesired duplicate or not.
Use a randomly generated token with every rendering of a form to decide if the request is coming from the same rendered form by multiple clicks or if the token is different then go ahead with the saving mechanism. This method is less error prone and efficient in implementation and use and if you design your system intelligently, it would not require every developer to ensure that she takes the multiple form submit issue in mind.
