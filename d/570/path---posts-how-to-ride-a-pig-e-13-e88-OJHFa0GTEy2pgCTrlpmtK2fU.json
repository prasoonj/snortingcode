{"data":{"site":{"siteMetadata":{"title":"Snorting Code, Et al.","subtitle":"I don't take myself too seriously!","copyright":"© All rights reserved.","author":{"name":"Prasoon","twitter":"prasoonj"},"disqusShortname":"","url":"https://prasoonj.github.io/snortingcode"}},"markdownRemark":{"id":"b7817d4f-9340-5fc5-903b-08d0a501ad26","html":"<p>I was skeptical about using PIG. I mean, why should I be using a (limited?) set of statements when I can actually do as much (and as little) as I want to do while writing MapReduce jobs with Java! To cut a long story short, I’m a fan of Pig now. It has it’s problems but for most problems that the world has to offer, it works like a charm.\nWhen to use:If you google the phrase “When to use pig over MR” you would get a million perspectives/opinions. The best I found was this flow-chart (don’t remember the source, please point me to it if you can):</p>\n<p>Now, that we have the holy grail of all questions about Pig out of our way, let’s explore it a little bit.\nInstallationThe installation guide walks you through the process. Personally, I found it exceptionally helpful to have the Pig plugin for eclipse (all it does is highlight my Pig Latin scripts but, even that is great help!) and write the code there. Writing the PigUnit test cases becomes easier then.</p>\n<h1>Sample Pig script</h1>\n<p>Here’s a simple Pig script that does the following:</p>\n<ol>\n<li>Load a file with structured data into an ‘alias’ (think of them as variables that store the schema of the file that is loaded.</li>\n<li>Pickup a few columns from this file and do some manipulation on them.</li>\n<li>Store the result into another file.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"pig\"><pre class=\"language-pig\"><code class=\"language-pig\">--These are single line comments!\n--Load a file into an alias\nsample_raw = LOAD &#39;&#39;input.txt&#39;&#39; AS     (name:chararray, age:int, doge_score:int, hipster_score:int) USING PigStorage(&#39;&#39;,&#39;&#39;) ;\n\n--Do some manipulations\nsample_man = FOREACH sample_raw GENERATE     name, (doge_score + hipster_score) AS total_score ;\n\n--Store the results into a file\nSTORE sample_man INTO &#39;&#39;sample_man.csv&#39;&#39; USING PigStorage(&#39;&#39;,&#39;&#39;) ; </code></pre></div>\n<p>Though the script looks embarrassingly simple, a lot is happening under the hoods. Let’s start by defining some terminology:</p>\n<blockquote>\n<p>Bag - Think of that as a table in the relational world. It is a collection of tuples.</p>\n</blockquote>\n<blockquote>\n<p>Tuples - These are the individual records that a ”Bag’ contains.</p>\n</blockquote>\n<blockquote>\n<p>Columns - The columns inside a tuple.</p>\n</blockquote>\n<p>One important thing to consider is that Pig interpreter ultimately creates MR jobs and runs them. However, the MR jobs are run only for statements like <code class=\"language-text\">STORE</code> and <code class=\"language-text\">DUMP</code>. Before that all that the script does is define schema for the file to be read and all manipulations are done using those schema. No file is read (however, if the file does not exist, your script will throw an exception).\nSo, the <code class=\"language-text\">LOAD</code> statement defines a schema for the Bag and stores it into an ”alias’ <code class=\"language-text\">sample_raw</code>. The part of that statement in “( )” is not required but it is useful so that you can call your fields with names instead of using positional notation like “<code class=\"language-text\">$0</code>, <code class=\"language-text\">$1</code>” etc.\nThe <code class=\"language-text\">FOREACH</code> statement would run through all the Tuples and manipulate them for us (this is the part that carries the logic that you would otherwise write in a mapper). Important to remember that even here no MR job is actually run till the script encounters a <code class=\"language-text\">STORE/DUMP</code> statement.\nFinally, the STORE statement would run a MR job and store the results into the <code class=\"language-text\">sample_man</code> directory (The results file should be something like “<code class=\"language-text\">sample_man/part-m-00000</code>”).\nEasy! Let’s take a look at testing this script now.</p>\n<h1>PigUnit</h1>\n<p>The PigUnit test framework is built on JUnit (yes, here you get to write some Java finally!) I would say that it is a work in progress because it comes with a lot of restrictions (as of version 0.13.0) but, it still works for most cases. </p>\n<h2>Unit test strategy</h2>\n<p>Here’s what I think is the best way to go about testing a Pig script:</p>\n<ol>\n<li>Have an input file with sample input (most examples show a String[] input/output, I think it defeats the purpose).</li>\n<li>LOAD the input into the alias by using the PigTest.override() method and passing the same query used in the script.</li>\n<li>Use the output file to compare with the alias.</li>\n</ol>\n<p>Here’s a piece of sample code for the above script:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">List<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> outputList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nFile outputFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>PATH_TO_TEST_OUTPUT_FILE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nScanner sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span>outputFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    outputList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsc<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nString<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\noutput <span class=\"token operator\">=</span> outputList<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">assertOutput</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"producer_raw\"</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">,</span> <span class=\"token string\">\"producer_clean\"</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>(The PigTest, sadly, has a bunch of flavors of assertOutput but, they are not perfect. There is a method to test an alias against a file but it does not let me assign input to another alias at the same time. The method used above expects the last argument to be a String[]. The PigTest.override() method only takes a query for the second parameter and there is not way to assign an input there to an alias.)\nOne major advantage of using this approach of testing is that your test scripts remain more or less generic. Just pass the appropriate test input file and a corresponding test output file and you can sit back and watch your pig grunt away to glory!\nGotchas\nBe careful with “;” at the end of a %DECLARE statement. It might become a part of the variable that you are declaring!\nDEFINE does verbatim substitution. This is just a lexical substitution, the execution of say a UDF DEFINEd in the script would happen only inside the FOREACH. This can lead to problems when you wish to generate a unique value for a column per-file that you process that remain constant for all the records in that file.\nScalar assignment works with %DECLARE\nPig/PigUnit works in two modes - local and MapReduce. By default it runs in MapReduce mode!\nThe parser is not very intuitive. Test the script with DESCRIBE alias ; if you run into problems.\nAccessing tuples inside a bag can vary based on the context - Bag::field<em>in</em>tuple, Bag.field<em>in</em>tuple.\nAvoid copy-paste of column names, etc. from a rich-text editor. One of the worst bugs I encountered were the ones where a freak character was copied by accident into my script! Again, the exceptions that you would get are not very intuitive.</p>","fields":{"tagSlugs":["/tags/pig/","/tags/hadoop/","/tags/apachepig/","/tags/pigunit/"]},"frontmatter":{"title":"How To Ride A Pig!","tags":["pig","hadoop","apachepig","pigunit"],"date":"2014-11-27T06:49:00+05:30","description":null}}},"pageContext":{"slug":"/posts/how-to-ride-a-pig"}}